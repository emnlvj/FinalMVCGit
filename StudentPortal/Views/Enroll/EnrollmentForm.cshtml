@{
    ViewData["Title"] = "Student Information";
}
@model StudentEnrollment
<div class="container mt-5">
    <h3 class="text-center mb-4">Enrollment Form</h3>

    <!-- Student Info Form -->
    <form method="post" asp-action="EnrollmentForm" asp-controller="Enroll">
        <!-- Student Details -->
        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="Id" class="form-label">ID Number:</label>
                <div class="input-group">
                    <input asp-for="Id" class="form-control" id="idNumber">
                    <button type="button" class="btn btn-secondary" id="verifySubCodeBtn">Check</button>
                </div>
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label class="form-label">Name:</label>
                <input class="form-control" id="name" readonly>
                
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label  class="form-label">Course:</label>
                <input class="form-control" id="course" readonly>
               
            </div>
            <div class="col-md-6">
                <label class="form-label">Year:</label>
                <input  class="form-control" id="year" readonly>

                
            </div>
        </div>

        <!-- EDP Code and Total Units -->
        <div class="row align-items-center mb-3">
            <div class="col-md-7 d-flex align-items-center">
                <label class="form-label me-2">EDP Code:</label>
                <input type="text" class="form-control me-2" id="edpCode" name="edpCode" style="width: 300px;">
                <button type="button" class="btn btn-success btn-sm" id="addRow" style="width: 150px;">Add Schedule</button>
            </div>
            <div class="col-md-3 d-flex align-items-center">
                <label class="form-label me-2">Total Units:</label>
                <input  class="form-control" id="totalUnits" readonly style="width: 120px;">
              
            </div>
        </div>

        <!-- Schedule Table -->
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>EDP Code</th>
                    <th>Subject Code</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Days</th>
                    <th>Room</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="scheduleTableBody">
            </tbody>
        </table>

        <!-- Submit Buttons -->
        <div class="text-center mt-4">
            <button type="submit" id="SubmitButton" class="btn btn-primary me-2">Save</button>
            <button type="reset" class="btn btn-secondary">Cancel</button>
        </div>
    </form>
</div>

<!-- JavaScript for Dynamic Rows -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let rowCount = 0;
        let totalUnits = 0;

        // Normalize day strings like "TTH" to ["T", "H"]
        function normalizeDays(days) {
            let normalizedDays = [];
            if (days.includes("T") && days.includes("H")) {
                if (days === "TH") {
                    normalizedDays = ["TH"];
                } else if (days === "TTH") {
                    normalizedDays = ["T", "TH"];
                } else if (days === "THS") {
                    normalizedDays = ["TH", "S"];
                } else if (days === "TTHS") {
                    normalizedDays = ["T", "TH", "S"];
                }
            } else {
                normalizedDays = days.split(""); // Split into individual characters
            }
            return normalizedDays;
        }

        // Check for schedule conflicts
        function checkScheduleConflict() {
            const rows = document.querySelectorAll("#scheduleTableBody tr");

            for (let i = 0; i < rows.length; i++) {
                const newDays = normalizeDays(rows[i].querySelector('input[name*="Days"]').value);
                const newStartTime = rows[i].querySelector('input[name*="StartTime"]').value;
                const newEndTime = rows[i].querySelector('input[name*="EndTime"]').value;

                for (let j = i + 1; j < rows.length; j++) {
                    const existingDays = normalizeDays(rows[j].querySelector('input[name*="Days"]').value);
                    const existingStartTime = rows[j].querySelector('input[name*="StartTime"]').value;
                    const existingEndTime = rows[j].querySelector('input[name*="EndTime"]').value;

                    const dayConflict = newDays.some(day => existingDays.includes(day));

                    if (dayConflict && (
                        (newStartTime >= existingStartTime && newStartTime < existingEndTime) ||
                        (newEndTime > existingStartTime && newEndTime <= existingEndTime) ||
                        (newStartTime <= existingStartTime && newEndTime >= existingEndTime)
                    )) {
                        return true; // Conflict found
                    }
                }
            }
            return false; // No conflict
        }

        // Check for duplicate EDP Code
        function isDuplicateEdpCode(edpCode) {
            const rows = document.querySelectorAll("#scheduleTableBody tr");
            for (let row of rows) {
                const existingEdpCode = row.querySelector('input[name*="SubEdpCode"]').value;
                if (existingEdpCode === edpCode) {
                    alert("EDP Code already exists on the table.");
                    return true;
                }
            }
            return false;
        }

        // Update row indices for inputs
        function updateRowNames() {
            const rows = document.querySelectorAll("#scheduleTableBody tr");
            rows.forEach((row, index) => {
                row.querySelectorAll("input").forEach(input => {
                    const name = input.getAttribute("name");
                    if (name) {
                        const newName = name.replace(/\[\d+\]/, `[${index}]`);
                        input.setAttribute("name", newName);
                    }
                });
            });
        }

        // Add schedule when "Add Schedule" is clicked
        document.getElementById("addRow").addEventListener("click", function () {
            const edpCode = document.getElementById("edpCode").value;

            if (!edpCode) {
                alert("Please enter an EDP Code.");
                return;
            }

            if (isDuplicateEdpCode(edpCode)) {
                return; // Stop further processing if duplicate is found
            }

            fetch(`/Enroll/GetScheduleByEdpCode?edpCode=${edpCode}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Schedule not found.");
                    }
                    return response.json();
                })
                .then(scheduleData => {
                    fetch(`/Enroll/GetUnitsBySubjectCode?subjectCode=${scheduleData.subjectCode}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error("Units not found.");
                            }
                            return response.json();
                        })
                        .then(unitsData => {
                            totalUnits += unitsData.units;
                            document.getElementById("totalUnits").value = totalUnits;

                            const tableBody = document.getElementById("scheduleTableBody");
                            const newRow = document.createElement("tr");
                            newRow.innerHTML = `
                                    <td><input type="text" class="form-control form-control-sm" name="Schedules[${rowCount}].SubEdpCode" value="${scheduleData.edpCode}" readonly></td>
                                    <td><input type="text" class="form-control form-control-sm" name="Schedules[${rowCount}].SubjectCode" value="${scheduleData.subjectCode}" readonly></td>
                                    <td><input type="time" class="form-control form-control-sm" name="Schedules[${rowCount}].StartTime" value="${scheduleData.startTime}" readonly></td>
                                    <td><input type="time" class="form-control form-control-sm" name="Schedules[${rowCount}].EndTime" value="${scheduleData.endTime}" readonly></td>
                                    <td><input type="text" class="form-control form-control-sm" name="Schedules[${rowCount}].Days" value="${scheduleData.days}" readonly></td>
                                    <td><input type="text" class="form-control form-control-sm" name="Schedules[${rowCount}].Room" value="${scheduleData.room}" readonly></td>
                                    <td class="text-center">
                                        <button type="button" class="btn btn-danger btn-sm remove-row" data-units="${unitsData.units}">Remove</button>
                                    </td>
                                `;
                            tableBody.appendChild(newRow);
                            rowCount++;
                        });
                })
                .catch(error => {
                    alert(error.message);
                });
        });

        // Remove a schedule row
        document.getElementById("scheduleTableBody").addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-row")) {
                const row = e.target.closest("tr");
                const unitsToSubtract = parseInt(e.target.getAttribute("data-units"), 10);
                totalUnits -= unitsToSubtract;
                document.getElementById("totalUnits").value = totalUnits;
                row.remove();
                updateRowNames();
            }
        });

        // Verify Student ID and fetch details
        document.getElementById("verifySubCodeBtn").addEventListener("click", function () {
            const idNumber = document.getElementById("idNumber").value;

            if (!idNumber) {
                alert("Please enter an ID Number.");
                return;
            }

            fetch(`/Enroll/GetStudentById?idNumber=${idNumber}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Student not found.");
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById("name").value = data.name || "";
                    document.getElementById("course").value = data.course || "";
                    document.getElementById("year").value = data.year || "";
                })
                .catch(error => {
                    alert(error.message);
                    document.getElementById("name").value = "";
                    document.getElementById("course").value = "";
                    document.getElementById("year").value = "";
                });
        });

        document.getElementById('SubmitButton').addEventListener('click', function (event) {
            event.preventDefault();

            if (checkScheduleConflict()) {
                event.preventDefault(); // Prevent form submission
                alert("Conflict detected in schedules. Please resolve before submitting.");
                return;
            }

            const rows = document.querySelectorAll("#scheduleTableBody tr");
            const schedules = Array.from(rows).map(row => ({
                SubEdpCode: parseInt(row.querySelector('input[name*="SubEdpCode"]').value, 10)
            }));

            const studentId = parseInt(document.getElementById("idNumber").value, 10);

            if (!studentId || schedules.length === 0) {
                alert("Please provide valid Student ID and at least one schedule.");
                return;
            }

            const formData = {
                Id: studentId,
                Schedules: schedules
            };

            fetch('/Enroll/EnrollmentForm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Enrollment saved successfully!");
                        location.reload();
                    } else {
                        alert(`Error: ${data.message}`);
                    }
                })
                .catch(error => {
                    console.error("Error submitting form:", error);
                    alert("An error occurred while submitting the form.");
                });
        });


    });
</script>
